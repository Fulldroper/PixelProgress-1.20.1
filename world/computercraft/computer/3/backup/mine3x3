-- tunnel3x3.lua
-- –ö–æ–ø–∞—î —Ç—É–Ω–µ–ª—å 3x3 –≤–ø–µ—Ä–µ–¥ –Ω–∞ –∑–∞–¥–∞–Ω—É –¥–æ–≤–∂–∏–Ω—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–¥
function cls()
  term.clear()
  term.setCursorPos(1, 1)
end

cls()

local length = tonumber(...) or error("Usage: tunnel3x3 <length>")
local fuelStart = turtle.getFuelLevel()
local fuelRequired = length + (length * 5)

print("start dig " .. tostring(length) .. " blocks")
-- –ó–∞–ø—Ä–∞–≤–∫–∞
local function refuelIfNeeded()
  local fuelNow = turtle.getFuelLevel()
  local fuelUsed = fuelStart - fuelNow
  local fuelLeftToUse = fuelRequired - fuelUsed
  
  print("üîã fuel: [" .. fuelUsed .. "/" .. fuelLeftToUse .. "]")
  
  if fuelNow > 10 then
    return -- –ü–∞–ª–∏–≤–∞ –ø–æ–∫–∏ —â–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ
  end

  for slot = 1, 16 do
    local item = turtle.getItemDetail(slot)
    if item then
      turtle.select(slot)
      if turtle.refuel(1) then
        print("‚úÖ refuelet from slot: " .. slot)
        return
      end
    end
  end

  error("‚ùå no fuel in inventory!")
end

-- direction: "front", "up", "down"
function ensureBlockBroken(direction)
  local detect, dig

  if direction == "front" then
    detect = turtle.detect
    dig = turtle.dig
  elseif direction == "up" then
    detect = turtle.detectUp
    dig = turtle.digUp
  elseif direction == "down" then
    detect = turtle.detectDown
    dig = turtle.digDown
  else
    error("‚ùå Unknown direction: " .. tostring(direction))
  end

  while detect() do
    dig()
  end
end


-- –ö–æ–ø–∞—î 3x3 —Å–µ–∫—Ü—ñ—é –ø–µ—Ä–µ–¥ —á–µ—Ä–µ–ø–∞—à–∫–æ—é
local function dig3x3Section()
  -- –¶–µ–Ω—Ç—Ä
  ensureBlockBroken("front")
  turtle.forward()
  turtle.turnLeft()
  ensureBlockBroken("front")
  turtle.turnRight()
  turtle.turnRight()
  ensureBlockBroken("front")
  
  ensureBlockBroken("up")
  turtle.up()
  ensureBlockBroken("front")
  turtle.turnLeft()
  turtle.turnLeft()
  ensureBlockBroken("front")

  ensureBlockBroken("up")
  turtle.up()
  ensureBlockBroken("front")
  turtle.turnRight()
  turtle.turnRight()
  ensureBlockBroken("front")
  
  turtle.turnLeft()
  turtle.down()
  turtle.down()
end

-- –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–æ–ø–∞–Ω–Ω—è
for i = 1, length do
  refuelIfNeeded()
  dig3x3Section()
  turtle.forward()
end

-- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ä—Ç
turtle.turnLeft()
turtle.turnLeft()
for i = 1, length do
  refuelIfNeeded()
  turtle.forward()
end
turtle.turnRight()
turtle.turnRight()
print("end dig " .. tostring(length) .. " blocks")
